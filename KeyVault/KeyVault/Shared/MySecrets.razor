@using KeyVault.Models.Secrets
@using KeyVault.Models.User
@using KeyVault.Tools
@using KeyVault.Data
@using System.Net.Http.Headers
@using System.Net
@using KeyVault.Entities
@inject LocalStorage LocalStorage
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject HttpClient HttpClient

<div>
    <div style="justify-content: @(!IsNewSecretTriggered ? "flex-end" : "space-between");
                align-items: center"
         class="create-secret-conatiner">
        <label hidden="@(!IsNewSecretTriggered)">Enter Secret Title</label>
        <input hidden="@(!IsNewSecretTriggered)" 
               class="create-secret-input"
               type="text"
               @bind="@NewSecretTitle"
               @oninput="ChangeSecretTitle"/>
        <img class="create-secret-btn" 
             src="@(IsNewSecretTriggered ? "Assets/close-create.svg" : "Assets/create-sign.svg")"
             @onclick="() => IsNewSecretTriggered = !IsNewSecretTriggered" />
    </div>
    
        @if (IsNewSecretTriggered)
        {
            <div style="display: flex; flex-direction: row; align-items: center"
                 class='create-secret-conatiner'>
            <label hidden="@(!IsNewSecretTriggered)"
                   style="font-size:  18px;
                    margin-top: 20px;
                     margin-bottom: 20px">Enter Secret Content</label>
            <input hidden="@(!IsNewSecretTriggered)"
                   class="create-secret-content-input"
                   type="text"
                   @bind="@NewSecretDescription" 
                   @oninput="ChangeSecretDescription"/>
            </div>
            <button disabled="@(NewSecretTitle.Length == 0 || NewSecretDescription.Length == 0)"
                    class="submit-new-secret" 
                    type="submit"
                    @onclick="@CreateSecret">Create Secret</button>
        }
        else
        {
            <div class='secrets-content-container'>
                @foreach (var secret in UserSecrets)
                {
                    <div class="secrets-content" key={secret.secretId}>
                        <p class="secrets-values">@secret.Title</p>
                        <p class="secrets-values">@secret.Content</p>
                        <p class="secrets-values">@secret.DateCreated</p>
                        <img class="delete-secret-btn" src="Assets/delete-icon.svg" alt=""/>
                    </div>
                }
            </div>
        }
</div>    
  
@code {
    private bool IsNewSecretTriggered { get; set; } = false;
    private string NewSecretTitle { get; set; } = "";
    private string NewSecretDescription { get; set; } = "";
    private List<SecretForHome> UserSecrets { get; set; } = new List<SecretForHome>();

    protected override async Task OnInitializedAsync()
    {
        UserSecrets = await GetUserSecrets();
        await base.OnInitializedAsync();
    }

    private async Task<List<SecretForHome>> GetUserSecrets()
    {
        var loggedInUser = (UserForHome)await LocalStorage.Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);
        
        if (loggedInUser == null)
        {
            await LocalStorage.Remove(JsRuntime, StorageData.Token);
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please log in again");
            Navigation.NavigateTo("/login");
            return new List<SecretForHome>();
        }

        var token = (string)await LocalStorage.Get<string>(JsRuntime, StorageData.Token);
        if (string.IsNullOrEmpty(token))
        {
            await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
            await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
            Navigation.NavigateTo("/login");
            return new List<SecretForHome>();
        }
        
        HttpClient.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", token);

        var secrets = await HttpClient.GetAsync($"https://localhost:5001/api/secrets?ownerId={loggedInUser.Id}");

        if (!secrets.IsSuccessStatusCode)
        {
            if (secrets.StatusCode == HttpStatusCode.Unauthorized)
            {
                await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
                await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
                Navigation.NavigateTo("/login");
                return new List<SecretForHome>();
            }
            await JsRuntime.InvokeVoidAsync("alert", $"Something went wrong! Please try again");
            return new List<SecretForHome>();
        }

        var parsedSecrets = await secrets.Content.ReadFromJsonAsync<List<SecretForHome>>();

        if (parsedSecrets == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Something went wrong! Please try again");
            return new List<SecretForHome>();
        }
        
        return parsedSecrets;
    }

    private void ChangeSecretTitle(ChangeEventArgs e)
    {
        NewSecretTitle = (string)e.Value;
        StateHasChanged();
    }

    private void ChangeSecretDescription(ChangeEventArgs e)
    {
        NewSecretDescription = (string)e.Value;
        StateHasChanged();
    }
    
    private async Task CreateSecret()
    {
        var loggedInUser = (UserForHome)await LocalStorage.Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);
        
        if (loggedInUser == null)
        {
            await LocalStorage.Remove(JsRuntime, StorageData.Token);
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please log in again");
            Navigation.NavigateTo("/login");
            return;
        }

        var token = (string)await LocalStorage.Get<string>(JsRuntime, StorageData.Token);
        if (string.IsNullOrEmpty(token))
        {
            await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
            await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
            Navigation.NavigateTo("/login");
            return;
        }
        
        HttpClient.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", token);

        var tempNewSecret = new SecretForCreation()
        {
            Title = NewSecretTitle,
            Content = NewSecretDescription,
            OwnerId = loggedInUser.Id
        };

        var request = await HttpClient.PostAsJsonAsync("https://localhost:5001/api/secrets", tempNewSecret);

        if (!request.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please try again");
            return;
        }

        var newSecret = await request.Content.ReadFromJsonAsync<SecretForHome>();

        if (newSecret == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please refresh page");
            return;
        }

        UserSecrets.Insert(0, newSecret);
        NewSecretTitle = string.Empty;
        NewSecretDescription = string.Empty;
        IsNewSecretTriggered = !IsNewSecretTriggered;
        
    }
}