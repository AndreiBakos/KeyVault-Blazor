@using KeyVault.Models.Secrets
<div>
    <div style="justify-content: @(!IsNewSecretTriggered ? "flex-end" : "space-between");
                align-items: center"
         class="create-secret-conatiner">
        <label hidden="@(!IsNewSecretTriggered)">Enter Secret Title</label>
        <input hidden="@(!IsNewSecretTriggered)" 
               class="create-secret-input"
               type="text"
               @bind="@NewSecretTitle"
               @oninput="ChangeSecretTitle"/>
        <img class="create-secret-btn" 
             src="@(IsNewSecretTriggered ? "Assets/close-create.svg" : "Assets/create-sign.svg")"
             @onclick="() => IsNewSecretTriggered = !IsNewSecretTriggered" />
    </div>
    
        @if (IsNewSecretTriggered)
        {
            <div style="display: flex; flex-direction: row; align-items: center"
                 class='create-secret-conatiner'>
            <label hidden="@(!IsNewSecretTriggered)"
                   style="font-size:  18px;
                    margin-top: 20px;
                     margin-bottom: 20px">Enter Secret Content</label>
            <input hidden="@(!IsNewSecretTriggered)"
                   class="create-secret-content-input"
                   type="text"
                   @bind="@NewSecretDescription" 
                   @oninput="ChangeSecretDescription"/>
            </div>
            <button disabled="@(NewSecretTitle.Length == 0 || NewSecretDescription.Length == 0)"
                    class="submit-new-secret" 
                    type="submit"
                    @onclick="@PrintData">Create Secret</button>
        }
        else
        {
            <div class='secrets-content-container'>
                @foreach (var secret in Secret)
                {
                    <div class="secrets-content" key={secret.secretId}>
                        <p class="secrets-values">@secret.Title</p>
                        <p class="secrets-values">@secret.Content</p>
                        <p class="secrets-values">@secret.DateCreated</p>
                        <img class="delete-secret-btn" src="Assets/delete-icon.svg" alt=""/>
                    </div>
                }
            </div>
        }
</div>    
  
@code {
    private bool IsNewSecretTriggered { get; set; } = false;
    private string NewSecretTitle { get; set; } = "";
    private string NewSecretDescription { get; set; } = "";

    private List<SecretForHome> Secret { get; set; } = new List<SecretForHome>()
    {
        new SecretForHome()
        {
            Id = Guid.NewGuid().ToString(),
            Content = "Secret Content1",
            DateCreated = DateTime.UtcNow.ToString(),
            OwnerId = Guid.NewGuid().ToString(),
            Title = "Secret 1 title"
        },
        new SecretForHome()
        {
            Id = Guid.NewGuid().ToString(),
            Content = "Secret Content 2",
            DateCreated = DateTime.UtcNow.ToString(),
            OwnerId = Guid.NewGuid().ToString(),
            Title = "Secret 2 title"
        }
    };

    private void ChangeSecretTitle(ChangeEventArgs e)
    {
        NewSecretTitle = (string)e.Value;
        StateHasChanged();
    }

    private void ChangeSecretDescription(ChangeEventArgs e)
    {
        NewSecretDescription = (string)e.Value;
        StateHasChanged();
    }
    
    void PrintData()
    {
        Console.WriteLine($"{NewSecretTitle}\n{NewSecretDescription}");
    }
}