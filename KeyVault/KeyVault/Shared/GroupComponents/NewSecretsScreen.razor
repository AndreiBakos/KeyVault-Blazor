@using KeyVault.Tools
@using KeyVault.Models.User
@using KeyVault.Pages
@using KeyVault.Data
@using KeyVault.Models.GroupSecrets
@using KeyVault.Models.Secrets
@using System.Net.Http.Headers
@inject NavigationManager Navigation
@inject LocalStorage LocalStorage
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<div>
    <div style="display: flex; flex-direction: row; background-color: inherit" 
         class="create-secret-conatiner">
        <label hidden="@(!IsNewSecretTriggered)" 
               style="font-size: 18px; margin-top: 20px; margin-bottom: 20px">Enter Secret Content</label>
        <input hidden="@(!IsNewSecretTriggered)"
               class="create-secret-content-input" 
               type="text"
               @bind="NewSecretContent"
               @oninput="ChangeNewSecretContent"/>
    </div>
    <button disabled="@( NewSecretContent.Length < 1 || NewSecretTitle.Length < 1)"
            class="submit-new-secret" 
            type="submit"
            @onclick="async Task() => await CreateSecret(NewSecretContent)">Create Secret</button>
</div>

@code {
    [Parameter]
    public bool IsNewSecretTriggered { get; set; }
    
    [Parameter]
    public Action ChangeIsNewSecretTriggered { get; set; }

    [Parameter]
    public string NewSecretTitle { get; set; }

    [Parameter]
    public List<SecretForHome> GroupSecrets { get; set; }
    
    [Parameter]
    public string CurrentGroupId { get; set; }

    [Parameter]
    public Action EmptySecretTitle { get; set; }
    
    private string NewSecretContent { get; set; } = "";

    private async Task CreateSecret(string newSecretContent)
    {
        var user = (UserForHome)await LocalStorage
            .Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);

        if (user == null)
        {
            Navigation.NavigateTo("/login");
        }

        var token = (string)await LocalStorage.Get<string>(JsRuntime, StorageData.Token);
        if (string.IsNullOrEmpty(token))
        {
            await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
            await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
            Navigation.NavigateTo("/login");
            return;
        }
        
        HttpClient.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", token);

        var newSecretForCreation = new SecretForCreation()
        {
            Title = NewSecretTitle,
            Content = newSecretContent,
            OwnerId = user.Id
        };

        var newGroupSecretForCreation = new GroupSecretsForCreation()
        {
            GroupId = CurrentGroupId,
            Secret = newSecretForCreation
        };

        var request = await HttpClient.PostAsJsonAsync("https://localhost:5001/api/groups/secrets", newGroupSecretForCreation);
        if (!request.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please try again later");
            return;
        }

        var newSecret = await request.Content.ReadFromJsonAsync<SecretForHome>();
        if (newSecret == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please try again later");
            return;
        }

        GroupSecrets.Insert(0, newSecret);
        EmptySecretTitle.Invoke();
        ChangeIsNewSecretTriggered.Invoke();
    }

    private void ChangeNewSecretContent(ChangeEventArgs e)
    {
        NewSecretContent = (string)e.Value;
        StateHasChanged();
    }
}