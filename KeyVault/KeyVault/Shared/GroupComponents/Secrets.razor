@using KeyVault.Models.Secrets
@using KeyVault.Models.User
@using KeyVault.Tools
@using KeyVault.Data
@using System.Net.Http.Headers
@using System.Net
@inject NavigationManager Navigation
@inject LocalStorage LocalStorage
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

<div>
    @foreach (var secret in GroupSecrets)
    {
        <div class="secrets-content" key={@secret.Id}>
        <p class="secrets-values">@secret.Title</p>
        <p class="secrets-values">@secret.Content</p>
        <p class="secrets-values">@secret.DateCreated</p>
            <img class="delete-secret-btn" 
                 src="Assets/delete-icon.svg" 
                 alt=""
                 @onclick="async Task() => await DeleteSecret(secret.Id)" />
        </div>
    }

</div>
@code {
    [Parameter]
    public List<SecretForHome> GroupSecrets { get; set; }

    [Parameter]
    public Action<List<SecretForHome>> ChangeGroupSecrets { get; set; } 

    private async Task DeleteSecret(string secretId)
    {
        var loggedInUser = (UserForHome)await LocalStorage.Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);

        if (loggedInUser == null)
        {
            await LocalStorage.Remove(JsRuntime, StorageData.Token);
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please log in again");
            Navigation.NavigateTo("/login");
            return;
        }

        var token = (string)await LocalStorage.Get<string>(JsRuntime, StorageData.Token);
        if (string.IsNullOrEmpty(token))
        {
            await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
            await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
            Navigation.NavigateTo("/login");
            return;
        }

        HttpClient.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", token);

        var request = await HttpClient.DeleteAsync($"https://localhost:5001/api/groups/secrets?secretId={secretId}");

        if (!request.IsSuccessStatusCode)
        {
            if (request.StatusCode == HttpStatusCode.Unauthorized)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
                await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
                await LocalStorage.Remove(JsRuntime, StorageData.Token);
                Navigation.NavigateTo("/");
                return;    
            }
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please try again later");
            return;
        }

        ChangeGroupSecrets.Invoke(GroupSecrets.FindAll(u => !u.Id.Equals(secretId)));
    }
}