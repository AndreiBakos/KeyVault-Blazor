@page "/groups"
@using KeyVault.Models.Secrets
@using KeyVault.Models.Groups
@using KeyVault.Models.User
@using KeyVault.Tools
@using KeyVault.Data
@using System.Net.Http.Headers
@inject NavigationManager Navigation
@inject LocalStorage LocalStorage
@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient

@if(!IsFirstRender)
{
    <div>
        <Header CurrentPage="@SecretsPage.GroupSecrets" LoggedInUser="@LoggedInUser"/>
        <div style="justify-content: @( !IsNewSecretTriggered ? "flex-end" : "space-between" );"
             class="create-secret-conatiner">
            <label hidden="@( !IsNewSecretTriggered )">Enter Group Name</label>
            <div style="display: flex; width: 80%; justify-content: center">
                <input style="margin-right: @( NewGroupTitle.Length == 0 ? 50 : 0 )"
                       hidden="@(!IsNewSecretTriggered)"
                       class="create-secret-input"
                       type="text"
                       @bind="@NewGroupTitle"
                       @oninput="ChangeGroupTitle" />
                <img hidden="@( NewGroupTitle.Length == 0 )"
                     class="create-secret-btn"
                     style="margin-left: 20px"
                     src="Assets/check-logo.svg" 
                     alt=""
                     @onclick="CreateGroup"/>            
            </div>                       
            <img class="create-secret-btn"
                 src="@( IsNewSecretTriggered ? "Assets/create-sign.svg" : "Assets/close-create.svg" )"
                 @onclick="() => { IsNewSecretTriggered = !IsNewSecretTriggered; NewGroupTitle = string.Empty; }" 
                 alt="" />
        </div>
        <div class="secrets-content-container">
            
                @foreach (var group in GroupList)
                {
                    <div class="group-secrets-content">
                        <p class="secrets-values">@group.Title</p>
                        <p class="secrets-values">Owner: @group.Members.FirstOrDefault(m => m.Id == group.OwnerId)?.UserName</p>                                                    
                        <div style="display: flex; align-items: center; padding-right: 20px">                                    
                            <p style="font-weight: bolder; margin-right: 12px">@( group.Members.Count() <= 1 ? "No other members": "Members:")</p>
                            @if (group.Members.Count() > 1)
                            {
                                @for (int index = 0; index < group.Members.Count(); index++)
                                {
                                    <div style="display: flex">
                                        <p>@group.Members.ElementAt(index).UserName</p>

                                        @if (index < group.Members.Count() - 1)
                                        {
                                            <p>,</p>
                                        }
                                    </div>
                                }
                            }                    
                        </div>
                        <div class="enter-group-secret"
                             style="align-self: center">
                            <img style="width: 30px;
                                height: 30px;
                                align-self: center;
                                paddingRight: 50"
                            src="Assets/acces-group-secret.svg"
                            alt=""
                            @onclick="() => NavigateToGroup(group.GroupId)" />
                        </div>
                    </div>   
                }
        </div>
    </div>
}

@code {
    private bool IsFirstRender { get; set; } = true;
    private UserForHome LoggedInUser { get; set; } = new UserForHome();
    private bool IsNewSecretTriggered { get; set; } = false;
    private string NewGroupTitle { get; set; } = "";
    private List<GroupsForHome> GroupList { get; set; } = new List<GroupsForHome>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckForUser();
            GroupList = await GetGroups();
            IsFirstRender = false;
        }
        StateHasChanged();
    }

    private async Task CheckForUser()
    {
        var user = (UserForHome)await LocalStorage
            .Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);

        if (user == null)
        {
            Navigation.NavigateTo("/login");
        }

        LoggedInUser = user;
    }

    private async Task<List<GroupsForHome>> GetGroups()
    {
        var loggedInUser = (UserForHome)await LocalStorage.Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);
        if (loggedInUser == null)
        {
            await LocalStorage.Remove(JsRuntime, StorageData.Token);
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please log in again");
            Navigation.NavigateTo("/login");
            return new List<GroupsForHome>();
        }

        var token = (string)await LocalStorage.Get<string>(JsRuntime, StorageData.Token);
        if (string.IsNullOrEmpty(token))
        {
            await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
            await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
            Navigation.NavigateTo("/login");
            return new List<GroupsForHome>();
        }
        
        HttpClient.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", token);

        var request = await HttpClient.GetAsync($"https://localhost:5001/api/groups?userId={loggedInUser.Id}");

        if (!request.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something wrong happened! Please try again");
            return new List<GroupsForHome>();
        }

        var groups = await request.Content.ReadFromJsonAsync<List<GroupsForHome>>();

        if (groups == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something wrong happened! Please try again");
            return new List<GroupsForHome>();
        }

        return groups;
    }

    private async Task CreateGroup()
    {
        var loggedInUser = (UserForHome)await LocalStorage.Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);
        if (loggedInUser == null)
        {
            await LocalStorage.Remove(JsRuntime, StorageData.Token);
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please log in again");
            Navigation.NavigateTo("/login");
            return;
        }

        var token = (string)await LocalStorage.Get<string>(JsRuntime, StorageData.Token);
        if (string.IsNullOrEmpty(token))
        {
            await LocalStorage.Remove(JsRuntime, StorageData.LoggedInUser);
            await JsRuntime.InvokeVoidAsync("alert", "Session Expired! Please log in again");
            Navigation.NavigateTo("/login");
            return;
        }

        if (string.IsNullOrEmpty(NewGroupTitle))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please add a group title!");
            return;
        }

        if (NewGroupTitle.Contains("'"))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Invalid group title provided!");
            return;   
        }

        var newGroupForCreation = new GroupForCreation()
        {
            Title = NewGroupTitle,
            OwnerId = LoggedInUser.Id
        };

        HttpClient.DefaultRequestHeaders.Authorization = 
            new AuthenticationHeaderValue("Bearer", token);

        var request = await HttpClient.PostAsJsonAsync("https://localhost:5001/api/groups", newGroupForCreation);

        if (!request.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please try again");
            return;
        }

        var newGroup = await request.Content.ReadFromJsonAsync<GroupsForHome>();

        if (newGroup == null)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Something went wrong! Please refresh page");
            return;
        }

        GroupList.Insert(0, newGroup);
        NewGroupTitle = string.Empty;
        IsNewSecretTriggered = !IsNewSecretTriggered;
        NavigateToGroup(newGroup.GroupId);
    }

    private void ChangeGroupTitle(ChangeEventArgs e)
    {
        NewGroupTitle = (string)e.Value;
        StateHasChanged();
    }
    private void NavigateToGroup(string id)
    {
        Navigation.NavigateTo($"/group/{id}");
    }
}