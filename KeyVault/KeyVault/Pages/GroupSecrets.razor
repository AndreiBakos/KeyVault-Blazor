@page "/groups"
@using KeyVault.Models.Secrets
@using KeyVault.Models.Groups
@using KeyVault.Models.User
@using KeyVault.Tools
@using KeyVault.Data
@inject NavigationManager Navigation
@inject LocalStorage LocalStorage
@inject IJSRuntime JsRuntime

<div>
    <Header CurrentPage="@SecretsPage.GroupSecrets" LoggedInUser="@LoggedInUser"/>
    <div style="justify-content: @( !IsNewSecretTriggered ? "flex-end" : "space-between" );"
         class="create-secret-conatiner">
        <label hidden="@( !IsNewSecretTriggered )">Enter Group Name</label>
        <div style="display: flex; width: 80%; justify-content: center">
            <input style="margin-right: @( NewGroupTitle.Length == 0 ? 50 : 0 )"
                   hidden="@(!IsNewSecretTriggered)"
                   class="create-secret-input"
                   type="text"
                   @bind="@NewGroupTitle" />
            <img hidden="@( NewGroupTitle.Length == 0 )"
                 class="create-secret-btn"
                 style="margin-left: 20px"
                 src="Assets/check-logo.svg" 
                 alt=""/>            
        </div>                       
        <img class="create-secret-btn"
             src="@( IsNewSecretTriggered ? "Assets/create-sign.svg" : "Assets/close-create.svg" )"
             @onclick="() => IsNewSecretTriggered = !IsNewSecretTriggered" 
             alt="" />
    </div>
    <div class="secrets-content-container">
        
            @foreach (var group in GroupList)
            {
                <div class="group-secrets-content">
                    <p class="secrets-values">@group.Title</p>
                    <p class="secrets-values">Owner: @group.Members.FirstOrDefault(m => m.Id == group.OwnerId)?.UserName</p>                                                    
                    <div style="display: flex; align-items: center; padding-right: 20px">                                    
                        <p style="font-weight: bolder; margin-right: 12px">@( group.Members.Count() <= 1 ? "No other members": "Members:")</p>
                        @if (group.Members.Count() > 1)
                        {
                            @for (int index = 0; index < group.Members.Count(); index++)
                            {
                                <div style="display: flex">
                                    <p>@group.Members.ElementAt(index).UserName</p>

                                    @if (index < group.Members.Count() - 1)
                                    {
                                        <p>,</p>
                                    }
                                </div>
                            }
                        }                    
                    </div>
                    <div class="enter-group-secret"
                         style="align-self: center">
                        <img style="width: 30px;
                            height: 30px;
                            align-self: center;
                            paddingRight: 50"
                        src="Assets/acces-group-secret.svg"
                        alt=""
                        @onclick="() => NavigateToGroup(group.GroupId)" />
                    </div>
                </div>   
            }
    </div>
</div>

@code {
    private UserForHome LoggedInUser { get; set; } = new UserForHome();
    private bool IsFirstRender { get; set; } = true;
    private bool IsNewSecretTriggered { get; set; } = false;
    private string NewGroupTitle { get; set; } = "";
    
    private static List<UserForHome> TestUsersList { get; set; } = new List<UserForHome>()
    {
        new UserForHome()
        {
            Id = Guid.NewGuid().ToString(),
            UserName = "AndreiTest",
            Email = "andrei@test.test"
        },
        new UserForHome()
        {
            Id = Guid.NewGuid().ToString(),
            UserName = "AnaTest",
            Email = "ana@test.test"
        }
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckForUser();
            IsFirstRender = false;
        }
        StateHasChanged();
    }

    private async Task CheckForUser()
    {
        var user = (UserForHome)await LocalStorage
            .Get<UserForHome>(JsRuntime, StorageData.LoggedInUser);

        if (user == null)
        {
            Navigation.NavigateTo("/login");
        }

        LoggedInUser = user;
    }

    private static Entities.Group TestGroup { get; set; } = new Entities.Group()
    {
        GroupId = Guid.NewGuid().ToString(),
        Title = "Andrei COOL group",
        OwnerId = TestUsersList.First().Id,
    };


    private List<GroupsForHome> GroupList { get; set; } = new List<GroupsForHome>()
    {
        { new GroupsForHome(TestGroup, TestUsersList) },
    };

    private void NavigateToGroup(string id)
    {
        Navigation.NavigateTo($"/group/{id}");
    }
}